---
title: Supplementary Material (B) - Code for Steps 1 & 2, Browne's Circular Stochastic Process Model
description: |
  Accompanying the paper: "Soundscape descriptors in eighteen languages: translation and validation through listening experiments
author:
  - name: Andrew Mitchell
    email: andrew.mitchell.18@ucl.ac.uk
    affiliations: 
        - id: ucl-iede
          name: University College London
          department: Institute for Environmental Design and Engineering
          address: Central House, 14 Upper Woburn Place
          city: London
          state: UK
          postal-code: WC1H 0NN
    attributes:
        corresponding: true
    orcid: 0000-0003-0978-5046
  - name: Francesco Aletta
    email: f.aletta@ucl.ac.uk
    orcid: 0000-0003-0351-3189
    affiliations:
        - ref: ucl-iede
abstract: |
  Code accompanying the paper: "Soundscape descriptors in eighteen languages: translation and validation through listening experiments

format:
  # html:
  #   toc: true
  #   toc-expand: 2
  #   theme: flatly
  #   number-sections: true
  #   code-fold: show
  #   page-layout: full
  #   embed-resources: true
  elsevier-pdf:
    hyperrefoptions: 
      - "citecolor=black"
    echo: true
    latex-clean: true
    keep-tex: false
    toc: false
    journal:
      name: PsyArxiv
      formatting: preprint
      model: 3p
      cite-style: authoryear

bibliography: FellowshipRefs.bib

date: last-modified
keep-ipynb: true
cache: true
---

# Testing the quasi-circumplex structure (Steps 1 and 2)

```{r setup, echo=FALSE}
knitr::opts_chunk$set(echo = knitr::is_html_output())
is_html <- knitr::is_html_output()
```

```{r load data, warning=FALSE}
#| output: false

library(devtools)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(readxl)
library(here)
library(knitr)
library(CircE)
library(RCurl)

source(here("utils/sem_funcs.R")) # Load our own functions

# Create a folder for the outputs
dir.create(here("outputs", Sys.Date()), showWarnings = FALSE)
output_dir <- here("outputs", Sys.Date())

# Prep variables for the circumplex analysis
# Names of the scales for circumplex analysis
scales <- c("PAQ1", "PAQ2", "PAQ3", "PAQ4", "PAQ5", "PAQ6", "PAQ7", "PAQ8")
eq.angles <- c(0, 45, 90, 135, 180, 225, 270, 315) # Ideal angles for circumplex analysis

# Load in the SATP dataset from Zenodo
temp.file <- paste0(tempfile(), ".xlsx")
download.file(
    "https://zenodo.org/records/10159673/files/SATP%20Dataset%20v1.4.xlsx",
    temp.file,
    mode="wb")
satp <- read_excel(temp.file,
    na = c("", "N/A"),
    col_types = c(
        "text", "text", "text", # Lan, Rec, Part
        "numeric", # Age
        "text", # Gender
        "numeric", "numeric", "numeric", "numeric", 
        "numeric", "numeric", "numeric", "numeric", # PAQs
        "numeric", # loud
        "text", # Inst
        "numeric" # sequence
    )
  )

```


### Ipsatization

```{r}
# Ipsatize the data
# For each participant, we subtract the mean of their response to all scales
# across all recordings from their response to each scale for each recording
# This is done at the suggestion of JM Girard/R Circumplex

satp |>
    group_by(Participant) |>
    mutate(Mean = mean(c_across(scales), na.rm = TRUE)) -> parts_means

satp[scales] <- satp |>
    select(all_of(scales)) |>
    mutate(across(all_of(scales), ~ .x - parts_means$Mean))
```

## Step One: Tracey's Circular Order Model

```{r}
#| tbl-cap: "Results of the Circular Order analysis of the SATP dataset."
#| label: tbl-circular-order
#| cache: true
library(RTHORR)
source(here("utils/RTHORR_funcs.R")) # Load our own functions

# Run the RTHORR analysis
matrices <- list(na.omit(satp[scales]))
names(matrices) <- "SATP"
for (lang in unique(satp$Language)) {
    lang_data <- na.omit(satp[satp$Language == lang, ][scales])
    matrices[[lang]] <- lang_data
}
randall_df_output <- my_randall_from_df(matrices, names(matrices), ord="circular8")
knitr::kable(randall_df_output, digits=3, align = "c")
```

```{r}
print("Pass: ")
print(randall_df_output[randall_df_output$CI > 0.7, "description"])

print("Fail: ")
print(randall_df_output[randall_df_output$CI < 0.7, "description"])

pass <- randall_df_output[randall_df_output$CI > 0.7, "description"][-1]
satp <- satp[satp$Language %in% pass, ] # Filter to just the languages that pass

```

## Structural Equation Modelling using Browne's Stochastic Circumplex Model

### Run `CircE` Analysis

The bulk of the code for this process has been pulled out into a separate `sem_funcs.R` file, which is loaded at the beginning of the analysis. This file contains the functions used to run the circumplex analysis and compile the results into a single table.

`step_one_test(data, model_type, scales = c("PAQ1", "PAQ2", "PAQ3", "PAQ4", "PAQ5", "PAQ6", "PAQ7", "PAQ8"), m = 3) )` is the function used to run the circumplex analysis for a single model for a single language. It takes the data for that language, the model_type (one of `Circumplex`, `Equal comm.`, `Equal ang.`, or `Unconstrained`), the names of the scales, and the number of betas for the fourier series correlation function (we're using `m=3` by default). It then runs the analysis and returns a list of the results, including a list of the desired results (`res_list`) and the model object (`res_model`). 

`run_all_models(data, datasource, language, m)` is the function used to run the circumplex analysis for all four models for a single language. It takes the data for that language, the name of the data source (e.g. `SATP`), the language code, and the number of betas for the fourier series correlation function (m). It then runs the analysis for each of the four models and returns a list of the results, including a list of the four results and a table combining the results from all four models. 

First, we run the circumplex analysis for the English data. This is done separately from the other languages to set up the results data table.


```{r}
#| output: false

# Run the models for English
satp_eng <- satp[satp$Language == "eng", ]
circe_satp_eng <- run_all_models(satp_eng, "SATP", "eng", m = 3)

```

Then, we run the circumplex analysis for each of the other languages. This is done in a loop, with each language being run separately. The results for each language are then added to the results table.

Within each loop, we check for any errors in execution and append these to a list of errors to inspect later.

```{r}
#| output: false
#| cache: true
languages <- unique(satp$Language) # Get a list of all the languages

full_table <- circe_satp_eng$res_table # Start with the English results
for (lang in languages) {
    if (lang == "eng") {
        next # Skip English, we've already done it
    }
    print("=====================================")
    print(lang)
    print("=====================================")
    lang_data <- satp[satp$Language == lang, ] # Filter to just the language we want
    
    pass_on_error <- FALSE
    errors <- list()
    tryCatch(
      lang_res <- run_all_models(lang_data, "SATP", lang, m = 3), 
      error = function(e) {
        pass_on_error <<- TRUE
        errors[lang] <<- e
      }
    )
    if (pass_on_error) {
      next
    }
    # lang_res <- run_all_models(lang_data, "SATP", lang, m = 3) # Run the models
    full_table <- rbind(full_table, lang_res$res_table) # Add the results to the table
}

```

```{r}
# Catching any errors

for (name in names(errors)) {
  print("==========  Error in:  =============")
  print(errors[name])
}
```

### SEM Analysis Results

Below is the table of results for the circumplex analysis of the soundscape survey translations. The table includes the results for each of the four models for each language. The results are presented in the order of the models, with the unconstrained model first, followed by the equal spacing model, the equal communality model, and the circumplex model. The results for each model include the $\chi^2$ test, CFI, GFI, SRMR, RMSEA, MCSC, and GDIFF. These results are saved to a CSV file for later use.

Importantly, this table also reports the derived angles for each scale for the unconstrained and Equal comm. models. These angles will be carried over and used in the next stage of the analysis, where we will validate the survey instrument by correlating the survey responses with the acoustic indices using the Structural Summary Method (SSM).

```{r, results='asis'}
write.csv(full_table, here(output_dir, "sem-fit-ipsatized.csv"))
if (is_html) {
    kable(full_table, digits = 3, align = "c") %>%
        kableExtra::kable_styling(
          bootstrap_options = c(
            "striped", "hover", "condensed", "responsive", "bordered"
            )
          )
} else {
    kableExtra::kbl(
      full_table[, ! colnames(full_table) %in% c(
        'Dataset', 'Model Type', 'RMSEA.L', 'RMSEA.U', 'GDIFF', scales
        )],
      format = "latex",
      row.names = FALSE,
      booktabs = T,
      digits = 3,
      align = "c",
      longtable = TRUE,
      linesep = c("", "", "", "\\addlinespace")
    ) |>
    kableExtra::kable_classic_2()
}
```
